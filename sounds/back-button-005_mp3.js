/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,//swxAAAB0RTMHTHgBERDizrMMACABKdAosc07EMG4jq18bHHYJgBhWXBbxxquRWKxk1d5Eu/j7gPIm/R5EGh+Jz/DH5R38p4If8o4Plz7gGoDQDbkbEAAAAGUy3EDEutEv6EqwWoHUZq2B369iufv8DGxZltp81Yxz+WVmNLT+a+bsOMc5jRjMI9pw4ZSuZ93gBaqAVQAIbkAqP//syxAQACHShW12EABEUFCpqnoACi8L6W44IxF+neuxmHaR2YjY09IfFHADDjNLqOmiUZbShPca8HTt6R6X//5DcNyaxQsIYVCpVq57+vd9K4zCAlOUANRlFnIsk6DiKYfhbEJVqYhw4CmJdRoHioqEtRosj4hx1MNFBYIqYryvb6avO5lP/bu7+4rolAmpHtTqNrcxd2AZAoWjTbP/7MsQDgAh4cVtY9gAZEA5qyzLwAAAAAAAOY3HRhHkTwH62k3oqhMHN8qnwYEyGaVIoBB8ej+lJ8mcrrm9NfL5cOHF3LPr7cHVP4G7Xrm/RDfRYgAAAHJM8OCj2VlR/5EzsOJfqwJUN+SAo+0jtMaVeSMbpcqlwZkSSsYjkrStsukNLniNqupvO61+o6ftsb/1ccCnOXYAAACDtwAj/+zLEA4AIhLNrXYQAEQuU7fWElPbtqqz8kLF3J3NdmqCUztyeobAuNNYYttIdABRYeXF1EDxWBcqw5uv//+6/j+HDQfDquGrmu6aXIusxPV00UhElEgluRwCOvBnDg6SsybEqKhUtpCJQ0RTzEXllw2BEL812o4x1conKNVnZ779jtpKAQqdmjRkqmxiYgJ1Vf+Ys6MA402yTJbAA//swxAQASEydb6eU0XEIFm109JV+dxk4OwBTimKokAyKtrXDXuIyn1J2KGMHdwmBN6+VB1YRjlYTNdvWt6XJBiimNw3SzUUEiAdLMdG6/fiG4Wkk7I9BV0EeABEYsksNxQnXBZKnhUVbzwRTd/NKFyTf2v3olgcOwIdor0zo9+mXs1P6ALVdpPTZjjhIgr6PRUqkOJNIpyywAK0v//syxAUASMinaaessTEKFuy1hiiumRIwQbojCjQSGtcNveqlUq+Fes70xq3e7ppm24hpYaiov3yutWdqeFCqNYsWNLVAMdPb4kVY0pQdelH6KQpG2yk7J+M7RlDEycaEhiHZbJZkglAfpPDkxS6JIhqT0LSETkN1PnBu6Vpce+PUeLVnUsk8K57Pef9RvfJpLy/+XsGqYJTcQA02bP/7MsQEgEi0sVlMsOnxApKrMZY0/ovoc9EOMadiOXRoHMdAIkIzOzlqBPK0ZTBOnzuHZGa3Oz6lMPp7kOq5L641pZtADC91bNK9RIosmHFf/OMBxtNFr6Z3dKrGJnH4LT1CRZEXSYBoqko5RKXzpgqDKlchWxedlHH582TMhVHhOMc60OvzavbcZXWedTakiCiK6kDJQQL/AAvVWkr/+zLEBQAHYJVLTbDnwPCRaSm2KPzqMKnk6lkuqQzkvNnMS6kK6DE9hoR1/XDy8mIbsr61opUMUr5v+y68sBWrqQaip8iYwK5ABt0AC28tGOCZn8SiyovDwNkArwlIWFlacxOIWukKf7blq99G9Y+g5ACmjj2abL9PeSVLbDJ109KVVZQ9XLG5W6AApHiySIDQdpQjx8kqMRz1MPxR//swxA0AB2yLYaewSfDqk+olljT+Yq6hFJMQkCclxuLiGMt+W+pYLg/jx8YUCDKSlPb24ffy+FX8t3gDpP5WeAPacyOJ9jirTmYHlxMNjdLDGYtxkSaa2kvxDKPd3KTYyFI+pySV0e7d/PclOs/zuqqQ/qm7ADL5iDzulddslpskkFArAEtCb2ZXb0QrGP2xCJpYoGoyyZt1cL4j//syxBWAB0CNTSywSfDrEaext6j8XnHZGUC0ZuNNUbIKaJEoAAjCQCwwBM1IJHAI2PQVsU6eBcKlCWPbxNKKI+nYmKOVcX+0FTMdxsm3iN3rYkgoZ5rckbt39uV0fkEACxtAIt1AAa31HUwKpa67S/RrqkzHBcn8jYzewZY3tzNn+dPr4oJyeWae3MDXmdB/yMtyTo2giHoq3UOB3f/7MsQfAEd0jT+tvUfg5Q9rdPiqhvWW2aZkUpIgfEYdpqpNybmJBpxeazqX5mur0/Uv/1Ch7PkJcSculVCPWUEQ9qx/Um5UtZBbyFJwObayyzAAAY0nichI3RI3BVtxPjlHUO4ebShMjheGrhdEdr8uGp5oEqKTdIvLDsFzmbHudNOdKesksNgDKjJXLb8MTB5YPB6VK/wxJwHyzQT/+zLEKIBHdHtXp7GyMOIPJqW2ROIicfskkb2ZeDDINYiIopOLCNDQjxWWkui4wnzno+W2zGp9lFUT/8yyyBAO/ksg8WHUeJEonFFcTygYhELjNUpZ9ghIpmRcJZQfD6Ot6jdFQqjQs0Pp+W9RS5OV2////oKhALEloEZTaU5JACDNMWZhA9DO/EYtDVmGH4qxKy08rR3dx2InumBQ//swxDIAB3B5P0yxp7Duj2TJzDS4idN3QUTQODJuUNyskOTkOY+j9KoDhQRGAGqaWjoUZHuILCPHRNe/qdja9Wk634jbEHGbjV1yip4oOjYx5VsYAQ0kTcl6ltlNP//QiJTK3gsHTLtzCCqWqEmwU029KYcb7KLTk806moLZBdptSnsJfPzIZ4VUkNFVhDCVpUiTLOb8rPV752kR//syxDmCRtxzKu29RcDsjiPFzDS4qbJAwGG6V9z04TZSlc2TWlvnUT6xZmVB1X04BlUkqLFCjLzOoagJ57hW9Ze5Fb32f///6gAA5AL95p6CgPexIoBIwFuqehOW5IsSqE1ztGCt1Kwi1Mr3YGlrx1sqGuOP25X0yv5Kr9H6f/vqgB90mTBYbPRS8weFQASHHsBhUPQZL4tHHzjs2//7MsREgAagcSzssaeQ3Q3jjbecuo+47QFiAeepevgLCU0OykVReQdh2GzKGcelSxPkOnyaf7+flgAEBQKV4HBEYUOB2QwaDBQRM9nqZ1FGKeZfixXfl3uWooO6YNf5L3HbeHpUIENc4dmyEDrUIy3TqX630f///poACO0CVSyDAoMmye4QgioEtbCWX3F9MgYj5iWdN+gRpGb8x/P/+zLEUgMIAIMMDmWlwP4OIU3MKLgz3MFZ1+94IvCu6euVDUtvnZL8M/7f9NbuApX+ZwYCGGO7A89KoN8gHFEqBggsja4Y8/xqxtQicqGFbaz/WFv9qWh6n3yPX/3/7+rfTV6KKiEpvwL8VhSoQvWEQELKyGuVTCtGtGvXPtKMEmuOoecO1BXy8wG6G1HcSH83VuEn/+oFLSK/VuVw//swxFYDh3xdCm28R9DdiqANszzip9P5lFeLbfrQAKchad1luhKL4HRrIPscNVYyAqvrSaif6ClbTgLPMgqjhW7YUSmqCqq6AAAAAA1TzjThQGUDkCYlTEFNRTMuOTkuNVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//syxF+ASAju+Gy8pZCakZ90wYi+VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7MsRwA8JYHs3BhMB4AAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();
const onDecodeSuccess = decodedAudio => {
  wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
  unlock();
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 0, phetAudioContext.sampleRate ) );
  unlock();
};
phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
export default wrappedAudioBuffer;